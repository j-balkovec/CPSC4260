{
    "Name": "get_file_info.py",
    "Size": "5311 bytes",
    "Type": "py",
    "Date Created": "Sat May  3 13:25:59 2025",
    "Date Modified": "Sat May  3 13:25:56 2025",
    "Date Accessed": "Sat May  3 13:47:18 2025",
    "Data": "# __name__: Jakob Balkovec\n# __class__: CPSC 4260 - Software Refactoring\n# __date__: Sat Apr 19th, 2025\n#\n# __file__: get_file_info.py\n# __brief__: TODO\n\nimport os\nimport time\nimport json\n\nfrom exceptions import (FileReadError,\n                        CorruptFileError,\n                        FileNotFoundError,\n                        FileEmptyError,\n                        FileTypeUnsupportedError,\n                        FileDecodeError,\n                        FileLockedError,\n                        FileTooLargeError,\n                        FileOpenError)\n\nfrom constants import (SIZE_LIMIT)\nfrom logger import setup_logger\n\n# ==========\nget_file_info_logger = setup_logger(name=\"get_file_info.py_logger\", log_file=\"get_file_info.log\")\n# ==========\n\nget_file_info_logger.info(\"get_file_info\")\n\ndef extract_file_info(file_obj) -> dict:\n    \"\"\"_summary_\n\n    Args:\n        file_obj (_type_): 'Object' returned from 'upload_file()'. @see gui.py\n\n    Raises:\n        FileReadError: @see exceptions.py\n        CorruptFileError: @see exceptions.py\n        FileLockedError: @see exceptions.py\n        FileNotFoundError: @see exceptions.py\n        FileOpenError: @see exceptions.py\n\n    Returns:\n        dict: the metadata of the file\n    \"\"\"\n    try:\n        file_path = file_obj.name\n\n        valid = _validate_file(file_path)\n        \n        if not valid:\n            raise FileReadError(\"Validation failed\", filename=file_path, function=\"extract_file_info\")\n\n        metadata = _gather_metadata(file_path, file_obj)\n        if metadata is None:\n            raise CorruptFileError(\"Failed to gather metadata\", filename=file_path, function=\"extract_file_info\")\n\n        return metadata\n\n    except PermissionError as e:\n        raise FileLockedError(\"Permission denied\", filename=file_path, function=\"extract_file_info\") from e\n\n    except FileNotFoundError as e:\n        raise FileNotFoundError(\"File not found\", filename=file_path, function=\"extract_file_info\") from e\n\n    except OSError as e:\n        raise FileOpenError(\"OS error while opening the file\", filename=file_path, function=\"extract_file_info\") from e\n      \n      \ndef _validate_file(file_path: str) -> bool:\n    \"\"\"_summary_\n\n    Args:\n        file_path (str): full path of the file associated with the file_obj\n\n    Raises:\n        FileNotFoundError: @see exceptions.py\n        FileEmptyError: @see exceptions.py\n        FileTooLargeError: @see exceptions.py\n        FileTypeUnsupportedError: @see exceptions.py\n\n    Returns:\n        bool: returns True if the file is valid, otherwise raises an exception\n    \"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(\"File not found\", filename=file_path, function=\"_validate_file\")\n\n    size = os.path.getsize(file_path)\n    \n    if size == 0:\n        raise FileEmptyError(\"File is empty\", filename=file_path, function=\"_validate_file\")\n    \n    if size > SIZE_LIMIT:\n        raise FileTooLargeError(\"File is too large\", filename=file_path, function=\"_validate_file\")\n\n    file_type = os.path.splitext(file_path)[1].lstrip('.')\n    \n    if file_type not in [\"py\", \"txt\"]:\n        raise FileTypeUnsupportedError(\"File type is unsupported\", filename=file_path, function=\"_validate_file\")\n\n    return True\n  \n\ndef _gather_metadata(file_path: str, file_obj) -> dict:\n    \"\"\"_summary_\n\n    Args:\n        file_path (str): full path of the file associated with the file_obj \n        file_obj (_type_): 'Object' returned from 'upload_file()'. @see gui.py\n\n    Raises:\n        FileDecodeError: @see exceptions.py\n        FileReadError: @see exceptions.py\n\n    Returns:\n        dict: the metadata of the file\n    \"\"\"\n    name = os.path.basename(file_path)\n    size = os.path.getsize(file_path)\n    file_type = os.path.splitext(file_path)[1].lstrip('.')\n    date_created = time.ctime(os.path.getctime(file_path))\n    date_modified = time.ctime(os.path.getmtime(file_path))\n    date_accessed = time.ctime(os.path.getatime(file_path))\n\n    file_obj.seek(0)\n    \n    try:\n        \n        data = file_obj.read()\n        \n    except UnicodeDecodeError as e:\n        raise FileDecodeError(\"Failed to decode file\", filename=file_path, function=\"_gather_metadata\") from e\n    \n    except Exception as e:\n        raise FileReadError(\"Failed to read file\", filename=file_path, function=\"_gather_metadata\") from e\n\n    file_obj.close()\n\n    metadata = {\n        \"Name\": name,\n        \"Size\": f\"{size} bytes\",\n        \"Type\": file_type,\n        \"Date Created\": date_created,\n        \"Date Modified\": date_modified,\n        \"Date Accessed\": date_accessed,\n        \"Data\": data\n    }\n    \n    return metadata\n      \ndef save_to_json(metadata: dict):\n    \"\"\"_summary_\n\n    Args:\n        metadata (dict): the metadata of the file, obtained from @see '_gather_metadata()'\n\n    Returns:\n        _type_: path of the output file (<path>/json/info_<file_name>_<timestamp>.json)\n    \"\"\"\n    json_dir = os.path.join(os.getcwd(), \"file_info\")\n    os.makedirs(json_dir, exist_ok=True)\n\n    base_name = os.path.splitext(metadata['Name'])[0]\n    timestamp = time.strftime(\"%Y%m%d_%H%M%S\")\n    file_name = f\"info_{base_name}_{timestamp}.json\"\n    file_path = os.path.join(json_dir, file_name)\n\n    with open(file_path, \"w\") as json_file:\n        json.dump(metadata, json_file, indent=4)\n\n    return file_path\n"
}