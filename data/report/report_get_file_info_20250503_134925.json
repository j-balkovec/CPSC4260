{
    "long_parameter_list": [],
    "long_method": [
        {
            "function": "extract_file_info",
            "start_line": 31,
            "end_line": 70,
            "length": 40,
            "threshold": 15
        },
        {
            "function": "_validate_file",
            "start_line": 71,
            "end_line": 104,
            "length": 34,
            "threshold": 15
        },
        {
            "function": "_gather_metadata",
            "start_line": 105,
            "end_line": 151,
            "length": 47,
            "threshold": 15
        },
        {
            "function": "save_to_json",
            "start_line": 152,
            "end_line": 173,
            "length": 22,
            "threshold": 15
        }
    ],
    "duplicated_code": [
        {
            "block1": {
                "index": 0,
                "text": "import os\nimport time\nimport json\nfrom exceptions import (FileReadError,\n                        CorruptFileError,\n                        FileNotFoundError,\n                        FileEmptyError,\n                        FileTypeUnsupportedError,\n                        FileDecodeError,\n                        FileLockedError,\n                        FileTooLargeError,\n                        FileOpenError)\nfrom constants import (SIZE_LIMIT)\nfrom logger import setup_logger\nget_file_info_logger = setup_logger(name=\"get_file_info.py_logger\", log_file=\"get_file_info.log\")\nget_file_info_logger.info(\"get_file_info\")",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    ",",
                    "(",
                    "VAR",
                    "."
                ],
                "line_number": 1
            },
            "block2": {
                "index": 4,
                "text": "if not os.path.exists(file_path):\n        raise FileNotFoundError(\"File not found\", filename=file_path, function=\"_validate_file\")\n    size = os.path.getsize(file_path)",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    ",",
                    "(",
                    "VAR",
                    ":",
                    "."
                ],
                "line_number": 34
            },
            "similarity": 0.8571428571428571,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 1,
                "text": "try:\n        file_path = file_obj.name\n        valid = _validate_file(file_path)",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    "(",
                    "VAR",
                    ":",
                    "."
                ],
                "line_number": 18
            },
            "block2": {
                "index": 4,
                "text": "if not os.path.exists(file_path):\n        raise FileNotFoundError(\"File not found\", filename=file_path, function=\"_validate_file\")\n    size = os.path.getsize(file_path)",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    ",",
                    "(",
                    "VAR",
                    ":",
                    "."
                ],
                "line_number": 34
            },
            "similarity": 0.8571428571428571,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 2,
                "text": "if not valid:\n            raise FileReadError(\"Validation failed\", filename=file_path, function=\"extract_file_info\")\n        metadata = _gather_metadata(file_path, file_obj)",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    ",",
                    "(",
                    "VAR",
                    ":"
                ],
                "line_number": 21
            },
            "block2": {
                "index": 3,
                "text": "if metadata is None:\n            raise CorruptFileError(\"Failed to gather metadata\", filename=file_path, function=\"extract_file_info\")\n        return metadata",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    ",",
                    "(",
                    "VAR",
                    ":"
                ],
                "line_number": 24
            },
            "similarity": 1.0,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 2,
                "text": "if not valid:\n            raise FileReadError(\"Validation failed\", filename=file_path, function=\"extract_file_info\")\n        metadata = _gather_metadata(file_path, file_obj)",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    ",",
                    "(",
                    "VAR",
                    ":"
                ],
                "line_number": 21
            },
            "block2": {
                "index": 4,
                "text": "if not os.path.exists(file_path):\n        raise FileNotFoundError(\"File not found\", filename=file_path, function=\"_validate_file\")\n    size = os.path.getsize(file_path)",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    ",",
                    "(",
                    "VAR",
                    ":",
                    "."
                ],
                "line_number": 34
            },
            "similarity": 0.8571428571428571,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 2,
                "text": "if not valid:\n            raise FileReadError(\"Validation failed\", filename=file_path, function=\"extract_file_info\")\n        metadata = _gather_metadata(file_path, file_obj)",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    ",",
                    "(",
                    "VAR",
                    ":"
                ],
                "line_number": 21
            },
            "block2": {
                "index": 6,
                "text": "if file_type not in [\"py\", \"txt\"]:\n        raise FileTypeUnsupportedError(\"File type is unsupported\", filename=file_path, function=\"_validate_file\")\n    return True",
                "type": "code",
                "tokens": [
                    "=",
                    "]",
                    ")",
                    ",",
                    "(",
                    "[",
                    "VAR",
                    ":"
                ],
                "line_number": 42
            },
            "similarity": 0.75,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 3,
                "text": "if metadata is None:\n            raise CorruptFileError(\"Failed to gather metadata\", filename=file_path, function=\"extract_file_info\")\n        return metadata",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    ",",
                    "(",
                    "VAR",
                    ":"
                ],
                "line_number": 24
            },
            "block2": {
                "index": 4,
                "text": "if not os.path.exists(file_path):\n        raise FileNotFoundError(\"File not found\", filename=file_path, function=\"_validate_file\")\n    size = os.path.getsize(file_path)",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    ",",
                    "(",
                    "VAR",
                    ":",
                    "."
                ],
                "line_number": 34
            },
            "similarity": 0.8571428571428571,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 3,
                "text": "if metadata is None:\n            raise CorruptFileError(\"Failed to gather metadata\", filename=file_path, function=\"extract_file_info\")\n        return metadata",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    ",",
                    "(",
                    "VAR",
                    ":"
                ],
                "line_number": 24
            },
            "block2": {
                "index": 6,
                "text": "if file_type not in [\"py\", \"txt\"]:\n        raise FileTypeUnsupportedError(\"File type is unsupported\", filename=file_path, function=\"_validate_file\")\n    return True",
                "type": "code",
                "tokens": [
                    "=",
                    "]",
                    ")",
                    ",",
                    "(",
                    "[",
                    "VAR",
                    ":"
                ],
                "line_number": 42
            },
            "similarity": 0.75,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 4,
                "text": "if not os.path.exists(file_path):\n        raise FileNotFoundError(\"File not found\", filename=file_path, function=\"_validate_file\")\n    size = os.path.getsize(file_path)",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    ",",
                    "(",
                    "VAR",
                    ":",
                    "."
                ],
                "line_number": 34
            },
            "block2": {
                "index": 8,
                "text": "except Exception as e:\n        raise FileReadError(\"Failed to read file\", filename=file_path, function=\"_gather_metadata\") from e\n    file_obj.close()\n    metadata = {\n        \"Name\": name,\n        \"Size\": f\"{size} bytes\",\n        \"Type\": file_type,\n        \"Date Created\": date_created,\n        \"Date Modified\": date_modified,\n        \"Date Accessed\": date_accessed,\n        \"Data\": data\n    }\n    return metadata",
                "type": "code",
                "tokens": [
                    "=",
                    ")",
                    ",",
                    "(",
                    "VAR",
                    "}",
                    ":",
                    "{",
                    "."
                ],
                "line_number": 57
            },
            "similarity": 0.7777777777777778,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 5,
                "text": "if size > SIZE_LIMIT:\n        raise FileTooLargeError(\"File is too large\", filename=file_path, function=\"_validate_file\")\n    file_type = os.path.splitext(file_path)[1].lstrip('.')",
                "type": "code",
                "tokens": [
                    "=",
                    "]",
                    ")",
                    ",",
                    "(",
                    "1",
                    "VAR",
                    "[",
                    ">",
                    ":",
                    "."
                ],
                "line_number": 39
            },
            "block2": {
                "index": 7,
                "text": "def _gather_metadata(file_path: str, file_obj) -> dict:\n    name = os.path.basename(file_path)\n    size = os.path.getsize(file_path)\n    file_type = os.path.splitext(file_path)[1].lstrip('.')\n    date_created = time.ctime(os.path.getctime(file_path))\n    date_modified = time.ctime(os.path.getmtime(file_path))\n    date_accessed = time.ctime(os.path.getatime(file_path))\n    file_obj.seek(0)",
                "type": "code",
                "tokens": [
                    "=",
                    "0",
                    "]",
                    ")",
                    ",",
                    "(",
                    "1",
                    "VAR",
                    "->",
                    "[",
                    ":",
                    "."
                ],
                "line_number": 45
            },
            "similarity": 0.7692307692307693,
            "threshold": 0.75
        }
    ]
}