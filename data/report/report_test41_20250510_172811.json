{
    "long_parameter_list": [
        {
            "function": "__init__",
            "position": 1064,
            "params_count": 5,
            "threshold": 3
        },
        {
            "function": "minimax",
            "position": 1131,
            "params_count": 6,
            "threshold": 3
        },
        {
            "function": "maxValue",
            "position": 1268,
            "params_count": 6,
            "threshold": 3
        },
        {
            "function": "minValue",
            "position": 1413,
            "params_count": 6,
            "threshold": 3
        },
        {
            "function": "alphaBeta",
            "position": 1707,
            "params_count": 5,
            "threshold": 3
        },
        {
            "function": "maxValue",
            "position": 1838,
            "params_count": 5,
            "threshold": 3
        },
        {
            "function": "minValue",
            "position": 2012,
            "params_count": 5,
            "threshold": 3
        }
    ],
    "long_method": [
        {
            "function": "setup_logger",
            "start_line": 33,
            "end_line": 67,
            "length": 35,
            "threshold": 15
        },
        {
            "function": "getAction",
            "start_line": 68,
            "end_line": 89,
            "length": 22,
            "threshold": 15
        },
        {
            "function": "evaluationFunction",
            "start_line": 90,
            "end_line": 190,
            "length": 101,
            "threshold": 15
        },
        {
            "function": "scoreEvaluationFunction",
            "start_line": 191,
            "end_line": 216,
            "length": 26,
            "threshold": 15
        },
        {
            "function": "minimax",
            "start_line": 234,
            "end_line": 261,
            "length": 28,
            "threshold": 15
        },
        {
            "function": "maxValue",
            "start_line": 262,
            "end_line": 295,
            "length": 34,
            "threshold": 15
        },
        {
            "function": "minValue",
            "start_line": 296,
            "end_line": 360,
            "length": 65,
            "threshold": 15
        },
        {
            "function": "alphaBeta",
            "start_line": 380,
            "end_line": 402,
            "length": 23,
            "threshold": 15
        },
        {
            "function": "maxValue",
            "start_line": 403,
            "end_line": 441,
            "length": 39,
            "threshold": 15
        },
        {
            "function": "minValue",
            "start_line": 442,
            "end_line": 506,
            "length": 65,
            "threshold": 15
        },
        {
            "function": "expectimax",
            "start_line": 526,
            "end_line": 651,
            "length": 126,
            "threshold": 15
        },
        {
            "function": "betterEvaluationFunction",
            "start_line": 652,
            "end_line": 728,
            "length": 77,
            "threshold": 15
        }
    ],
    "duplicated_code": [
        {
            "block1": {
                "index": 4,
                "text": "if foodList is not None:\n            closestFoodDist = min((manhattanDistance(newPos, food) for food in foodList),\n                                  default=float('inf'))\n            score += weights[\"FOOD\"] / (closestFoodDist + 1.0)\n            ra_logger.info(\"closest food distance: %s\", closestFoodDist)\n            ra_logger.info(\"updated score (food): %s\", score)",
                "type": "code",
                "tokens": [
                    "if",
                    "VAR",
                    "is",
                    "not",
                    "None",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "(",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ")",
                    ",",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    ")",
                    "VAR",
                    "+=",
                    "VAR",
                    "[",
                    "VAR",
                    "]",
                    "/",
                    "(",
                    "VAR",
                    "+",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 49
            },
            "block2": {
                "index": 9,
                "text": "if capsules is not None:\n            closestCapsuleDist = min((manhattanDistance(newPos, capsule) for capsule in capsules),\n                                     default=float('inf'))\n            score += weights[\"CAPSULE\"] / (closestCapsuleDist + 1.0)\n            ra_logger.info(\"closest capsule distance: %s\", closestCapsuleDist)\n            ra_logger.info(\"updated score (capsule): %s\", score)\n        ra_logger.info(\"final evaluation score: %s\", score)\n        return score",
                "type": "code",
                "tokens": [
                    "if",
                    "VAR",
                    "is",
                    "not",
                    "None",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "(",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ")",
                    ",",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    ")",
                    "VAR",
                    "+=",
                    "VAR",
                    "[",
                    "VAR",
                    "]",
                    "/",
                    "(",
                    "VAR",
                    "+",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 69
            },
            "similarity": 0.9534883720930233,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 13,
                "text": "if state.isWin() or state.isLose() or depth == self.depth:\n                eval_value = self.evaluationFunction(state)\n                mma_logger.info(\"Terminal state reached: eval=%f\", eval_value)\n                return eval_value",
                "type": "code",
                "tokens": [
                    "if",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "or",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "or",
                    "VAR",
                    "==",
                    "VAR",
                    ".",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 88
            },
            "block2": {
                "index": 27,
                "text": "if state.isWin() or state.isLose() or depth == self.depth:\n                result = self.evaluationFunction(state)\n                aba_logger.info(\"terminal state or max depth reached, evaluation value=%d\", result)\n                return result",
                "type": "code",
                "tokens": [
                    "if",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "or",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "or",
                    "VAR",
                    "==",
                    "VAR",
                    ".",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 144
            },
            "similarity": 1.0,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 13,
                "text": "if state.isWin() or state.isLose() or depth == self.depth:\n                eval_value = self.evaluationFunction(state)\n                mma_logger.info(\"Terminal state reached: eval=%f\", eval_value)\n                return eval_value",
                "type": "code",
                "tokens": [
                    "if",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "or",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "or",
                    "VAR",
                    "==",
                    "VAR",
                    ".",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 88
            },
            "block2": {
                "index": 44,
                "text": "if gameState.isWin() or gameState.isLose() or depth == self.depth * state.getNumAgents():\n                result = self.evaluationFunction(state)\n                em_logger.info(\"terminal state or max depth reached, evaluation value=%d\", result)\n                return result",
                "type": "code",
                "tokens": [
                    "if",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "or",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "or",
                    "VAR",
                    "==",
                    "VAR",
                    ".",
                    "VAR",
                    "*",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 211
            },
            "similarity": 0.7586206896551724,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 14,
                "text": "if agentIndex == 0:\n                return maxValue(agentIndex, depth, state)",
                "type": "code",
                "tokens": [
                    "if",
                    "VAR",
                    "==",
                    "VAR",
                    ":",
                    "return",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 92
            },
            "block2": {
                "index": 28,
                "text": "if agentIndex == 0:\n                return maxValue(agentIndex, depth, state, alpha, beta)",
                "type": "code",
                "tokens": [
                    "if",
                    "VAR",
                    "==",
                    "VAR",
                    ":",
                    "return",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 148
            },
            "similarity": 1.0,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 15,
                "text": "else:\n                return minValue(agentIndex, depth, state)",
                "type": "code",
                "tokens": [
                    "else",
                    ":",
                    "return",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 94
            },
            "block2": {
                "index": 29,
                "text": "else:\n                return minValue(agentIndex, depth, state, alpha, beta)",
                "type": "code",
                "tokens": [
                    "else",
                    ":",
                    "return",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 150
            },
            "similarity": 1.0,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 16,
                "text": "def maxValue(agentIndex: int, depth: int, state: GameState):\n            bestValue = float(\"-inf\")\n            legalActions = state.getLegalActions(agentIndex)\n            mma_logger.info(\"Pacman (max): depth=%d, legalActions=%s\", depth, legalActions)",
                "type": "code",
                "tokens": [
                    "def",
                    "VAR",
                    "(",
                    "VAR",
                    ":",
                    "VAR",
                    ",",
                    "VAR",
                    ":",
                    "VAR",
                    ",",
                    "VAR",
                    ":",
                    "VAR",
                    ")",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 96
            },
            "block2": {
                "index": 19,
                "text": "def minValue(agentIndex: int, depth: int, state: GameState):\n            bestValue = float(\"inf\")\n            legalActions = state.getLegalActions(agentIndex)\n            mma_logger.info(\"Ghost (min): agentIndex=%d, depth=%d, legalActions=%s\", agentIndex, depth, legalActions)",
                "type": "code",
                "tokens": [
                    "def",
                    "VAR",
                    "(",
                    "VAR",
                    ":",
                    "VAR",
                    ",",
                    "VAR",
                    ":",
                    "VAR",
                    ",",
                    "VAR",
                    ":",
                    "VAR",
                    ")",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 110
            },
            "similarity": 1.0,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 17,
                "text": "if not legalActions:\n                eval_value = self.evaluationFunction(state)\n                mma_logger.info(\"No legal actions: returning eval=%f\", eval_value)\n                return eval_value",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 100
            },
            "block2": {
                "index": 20,
                "text": "if not legalActions:\n                eval_value = self.evaluationFunction(state)\n                mma_logger.info(\"No legal actions: returning eval=%f\", eval_value)\n                return eval_value\n            nextAgent = agentIndex + 1",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR",
                    "VAR",
                    "=",
                    "VAR",
                    "+",
                    "VAR"
                ],
                "line_number": 114
            },
            "similarity": 0.8095238095238095,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 17,
                "text": "if not legalActions:\n                eval_value = self.evaluationFunction(state)\n                mma_logger.info(\"No legal actions: returning eval=%f\", eval_value)\n                return eval_value",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 100
            },
            "block2": {
                "index": 31,
                "text": "if not legalActions:\n                result = self.evaluationFunction(state)\n                aba_logger.info(\"no legal actions, evaluation value=%d\", result)\n                return result",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 157
            },
            "similarity": 1.0,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 17,
                "text": "if not legalActions:\n                eval_value = self.evaluationFunction(state)\n                mma_logger.info(\"No legal actions: returning eval=%f\", eval_value)\n                return eval_value",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 100
            },
            "block2": {
                "index": 36,
                "text": "if not legalActions:\n                result = self.evaluationFunction(state)\n                aba_logger.info(\"no legal actions for ghost, evaluation value=%d\", result)\n                return result\n            nextAgent = agentIndex + 1",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR",
                    "VAR",
                    "=",
                    "VAR",
                    "+",
                    "VAR"
                ],
                "line_number": 175
            },
            "similarity": 0.8095238095238095,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 17,
                "text": "if not legalActions:\n                eval_value = self.evaluationFunction(state)\n                mma_logger.info(\"No legal actions: returning eval=%f\", eval_value)\n                return eval_value",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 100
            },
            "block2": {
                "index": 49,
                "text": "if not actions:\n                    result = self.evaluationFunction(state)\n                    em_logger.info(\"ghost has no legal actions at depth=%d, returning evaluation=%d\", depth, result)\n                    return result",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 228
            },
            "similarity": 0.9444444444444444,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 18,
                "text": "for action in legalActions:\n                successor = state.generateSuccessor(agentIndex, action)\n                value = minimax(1, depth, successor)\n                bestValue = max(bestValue, value)\n                mma_logger.info(\"Pacman considering action=%s, value=%f\", action, value)\n            return bestValue",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 104
            },
            "block2": {
                "index": 22,
                "text": "for action in legalActions:\n                successor = state.generateSuccessor(agentIndex, action)\n                value = minimax(nextAgent, depth, successor)\n                bestValue = min(bestValue, value)\n                mma_logger.info(\"Ghost considering action=%s, value=%f\", action, value)\n            return bestValue\n        bestAction = None\n        bestValue = float(\"-inf\")",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR",
                    "VAR",
                    "=",
                    "None",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ")"
                ],
                "line_number": 122
            },
            "similarity": 0.7692307692307693,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 18,
                "text": "for action in legalActions:\n                successor = state.generateSuccessor(agentIndex, action)\n                value = minimax(1, depth, successor)\n                bestValue = max(bestValue, value)\n                mma_logger.info(\"Pacman considering action=%s, value=%f\", action, value)\n            return bestValue",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 104
            },
            "block2": {
                "index": 32,
                "text": "for action in legalActions:\n                successor = state.generateSuccessor(agentIndex, action)\n                value = alphaBeta(1, depth, successor, alpha, beta)",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 161
            },
            "similarity": 0.85,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 18,
                "text": "for action in legalActions:\n                successor = state.generateSuccessor(agentIndex, action)\n                value = minimax(1, depth, successor)\n                bestValue = max(bestValue, value)\n                mma_logger.info(\"Pacman considering action=%s, value=%f\", action, value)\n            return bestValue",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 104
            },
            "block2": {
                "index": 38,
                "text": "for action in legalActions:\n                successor = state.generateSuccessor(agentIndex, action)\n                value = alphaBeta(nextAgent, depth, successor, alpha, beta)\n                bestValue = min(bestValue, value)\n                beta = min(beta, bestValue)",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 183
            },
            "similarity": 0.85,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 20,
                "text": "if not legalActions:\n                eval_value = self.evaluationFunction(state)\n                mma_logger.info(\"No legal actions: returning eval=%f\", eval_value)\n                return eval_value\n            nextAgent = agentIndex + 1",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR",
                    "VAR",
                    "=",
                    "VAR",
                    "+",
                    "VAR"
                ],
                "line_number": 114
            },
            "block2": {
                "index": 31,
                "text": "if not legalActions:\n                result = self.evaluationFunction(state)\n                aba_logger.info(\"no legal actions, evaluation value=%d\", result)\n                return result",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 157
            },
            "similarity": 0.8095238095238095,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 20,
                "text": "if not legalActions:\n                eval_value = self.evaluationFunction(state)\n                mma_logger.info(\"No legal actions: returning eval=%f\", eval_value)\n                return eval_value\n            nextAgent = agentIndex + 1",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR",
                    "VAR",
                    "=",
                    "VAR",
                    "+",
                    "VAR"
                ],
                "line_number": 114
            },
            "block2": {
                "index": 36,
                "text": "if not legalActions:\n                result = self.evaluationFunction(state)\n                aba_logger.info(\"no legal actions for ghost, evaluation value=%d\", result)\n                return result\n            nextAgent = agentIndex + 1",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR",
                    "VAR",
                    "=",
                    "VAR",
                    "+",
                    "VAR"
                ],
                "line_number": 175
            },
            "similarity": 1.0,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 20,
                "text": "if not legalActions:\n                eval_value = self.evaluationFunction(state)\n                mma_logger.info(\"No legal actions: returning eval=%f\", eval_value)\n                return eval_value\n            nextAgent = agentIndex + 1",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR",
                    "VAR",
                    "=",
                    "VAR",
                    "+",
                    "VAR"
                ],
                "line_number": 114
            },
            "block2": {
                "index": 49,
                "text": "if not actions:\n                    result = self.evaluationFunction(state)\n                    em_logger.info(\"ghost has no legal actions at depth=%d, returning evaluation=%d\", depth, result)\n                    return result",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 228
            },
            "similarity": 0.7727272727272727,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 21,
                "text": "if nextAgent >= state.getNumAgents():\n                nextAgent = 0\n                depth += 1",
                "type": "code",
                "tokens": [
                    "if",
                    "VAR",
                    ">=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    "VAR",
                    "+=",
                    "VAR"
                ],
                "line_number": 119
            },
            "block2": {
                "index": 37,
                "text": "if nextAgent >= state.getNumAgents():\n                nextAgent = 0\n                depth += 1",
                "type": "code",
                "tokens": [
                    "if",
                    "VAR",
                    ">=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    "VAR",
                    "+=",
                    "VAR"
                ],
                "line_number": 180
            },
            "similarity": 1.0,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 23,
                "text": "for action in gameState.getLegalActions(0):\n            successor = gameState.generateSuccessor(0, action)\n            value = minimax(1, 0, successor)\n            mma_logger.info(\"Root: Pacman action=%s, value=%f\", action, value)",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 130
            },
            "block2": {
                "index": 40,
                "text": "for action in gameState.getLegalActions(0):\n            successor = gameState.generateSuccessor(0, action)\n            value = alphaBeta(1, 0, successor, alpha, beta)",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 195
            },
            "similarity": 0.95,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 26,
                "text": "def getAction(self, gameState):\n        aba_logger.info(\"getting action for gameState=%s\", gameState)",
                "type": "code",
                "tokens": [
                    "def",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    ":",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 141
            },
            "block2": {
                "index": 42,
                "text": "def getAction(self, gameState):\n        em_logger.info(\"getting action for gameState=%s\", gameState)",
                "type": "code",
                "tokens": [
                    "def",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    ":",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 204
            },
            "similarity": 1.0,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 27,
                "text": "if state.isWin() or state.isLose() or depth == self.depth:\n                result = self.evaluationFunction(state)\n                aba_logger.info(\"terminal state or max depth reached, evaluation value=%d\", result)\n                return result",
                "type": "code",
                "tokens": [
                    "if",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "or",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "or",
                    "VAR",
                    "==",
                    "VAR",
                    ".",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 144
            },
            "block2": {
                "index": 44,
                "text": "if gameState.isWin() or gameState.isLose() or depth == self.depth * state.getNumAgents():\n                result = self.evaluationFunction(state)\n                em_logger.info(\"terminal state or max depth reached, evaluation value=%d\", result)\n                return result",
                "type": "code",
                "tokens": [
                    "if",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "or",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "or",
                    "VAR",
                    "==",
                    "VAR",
                    ".",
                    "VAR",
                    "*",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 211
            },
            "similarity": 0.7586206896551724,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 30,
                "text": "def maxValue(agentIndex, depth, state, alpha, beta):\n            aba_logger.info(\"entering maxValue: agentIndex=%d, depth=%d\", agentIndex, depth)\n            bestValue = float(\"-inf\")\n            bestAction = None\n            legalActions = state.getLegalActions(agentIndex)",
                "type": "code",
                "tokens": [
                    "def",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    ":",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "None",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")"
                ],
                "line_number": 152
            },
            "block2": {
                "index": 35,
                "text": "def minValue(agentIndex, depth, state, alpha, beta):\n            aba_logger.info(\"entering minValue: agentIndex=%d, depth=%d\", agentIndex, depth)\n            bestValue = float(\"inf\")\n            legalActions = state.getLegalActions(agentIndex)",
                "type": "code",
                "tokens": [
                    "def",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    ":",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")"
                ],
                "line_number": 171
            },
            "similarity": 0.85,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 31,
                "text": "if not legalActions:\n                result = self.evaluationFunction(state)\n                aba_logger.info(\"no legal actions, evaluation value=%d\", result)\n                return result",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 157
            },
            "block2": {
                "index": 36,
                "text": "if not legalActions:\n                result = self.evaluationFunction(state)\n                aba_logger.info(\"no legal actions for ghost, evaluation value=%d\", result)\n                return result\n            nextAgent = agentIndex + 1",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR",
                    "VAR",
                    "=",
                    "VAR",
                    "+",
                    "VAR"
                ],
                "line_number": 175
            },
            "similarity": 0.8095238095238095,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 31,
                "text": "if not legalActions:\n                result = self.evaluationFunction(state)\n                aba_logger.info(\"no legal actions, evaluation value=%d\", result)\n                return result",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 157
            },
            "block2": {
                "index": 49,
                "text": "if not actions:\n                    result = self.evaluationFunction(state)\n                    em_logger.info(\"ghost has no legal actions at depth=%d, returning evaluation=%d\", depth, result)\n                    return result",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 228
            },
            "similarity": 0.9444444444444444,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 32,
                "text": "for action in legalActions:\n                successor = state.generateSuccessor(agentIndex, action)\n                value = alphaBeta(1, depth, successor, alpha, beta)",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 161
            },
            "block2": {
                "index": 38,
                "text": "for action in legalActions:\n                successor = state.generateSuccessor(agentIndex, action)\n                value = alphaBeta(nextAgent, depth, successor, alpha, beta)\n                bestValue = min(bestValue, value)\n                beta = min(beta, bestValue)",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 183
            },
            "similarity": 1.0,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 32,
                "text": "for action in legalActions:\n                successor = state.generateSuccessor(agentIndex, action)\n                value = alphaBeta(1, depth, successor, alpha, beta)",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 161
            },
            "block2": {
                "index": 61,
                "text": "for ghost in ghostStates:\n        ghostPos = ghost.getPosition()\n        ghostDist = manhattanDistance(pacmanPos, ghostPos)",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 285
            },
            "similarity": 0.7894736842105263,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 36,
                "text": "if not legalActions:\n                result = self.evaluationFunction(state)\n                aba_logger.info(\"no legal actions for ghost, evaluation value=%d\", result)\n                return result\n            nextAgent = agentIndex + 1",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR",
                    "VAR",
                    "=",
                    "VAR",
                    "+",
                    "VAR"
                ],
                "line_number": 175
            },
            "block2": {
                "index": 49,
                "text": "if not actions:\n                    result = self.evaluationFunction(state)\n                    em_logger.info(\"ghost has no legal actions at depth=%d, returning evaluation=%d\", depth, result)\n                    return result",
                "type": "code",
                "tokens": [
                    "if",
                    "not",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ")",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "return",
                    "VAR"
                ],
                "line_number": 228
            },
            "similarity": 0.7727272727272727,
            "threshold": 0.75
        },
        {
            "block1": {
                "index": 38,
                "text": "for action in legalActions:\n                successor = state.generateSuccessor(agentIndex, action)\n                value = alphaBeta(nextAgent, depth, successor, alpha, beta)\n                bestValue = min(bestValue, value)\n                beta = min(beta, bestValue)",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 183
            },
            "block2": {
                "index": 61,
                "text": "for ghost in ghostStates:\n        ghostPos = ghost.getPosition()\n        ghostDist = manhattanDistance(pacmanPos, ghostPos)",
                "type": "code",
                "tokens": [
                    "for",
                    "VAR",
                    "in",
                    "VAR",
                    ":",
                    "VAR",
                    "=",
                    "VAR",
                    ".",
                    "VAR",
                    "(",
                    ")",
                    "VAR",
                    "=",
                    "VAR",
                    "(",
                    "VAR",
                    ",",
                    "VAR",
                    ")"
                ],
                "line_number": 285
            },
            "similarity": 0.7894736842105263,
            "threshold": 0.75
        }
    ],
    "code_metrics": {
        "LOC": 296,
        "SLOC": 727,
        "Comment Density": 0.388,
        "Blank Line Density": 0.205
    },
    "halstead_metrics": {
        "n1": 11,
        "n2": 236,
        "N1": 353,
        "N2": 1161,
        "N": 1514,
        "n": 247,
        "V": 12033.828,
        "D": 27.057,
        "HN": 1898.358,
        "E": 325601.731,
        "T": 18088.985,
        "B": 108.534,
        "M": -76.847
    }
}